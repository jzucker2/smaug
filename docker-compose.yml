services:

  home-assistant:
    container_name: home-assistant
    labels:
      - wud.tag.include=${WUD_SEMVAR_INCLUDE_LABEL}
      - wud.link.template=https://github.com/home-assistant/core/releases/tag/$${major}.$${minor}.$${patch}
    image: ghcr.io/home-assistant/home-assistant:${HOME_ASSISTANT_TAG}
    volumes:
#      - /PATH_TO_YOUR_CONFIG:/config
      - ${DATADIR}/home_assistant/config:/config
#      - /PATH_TO_YOUR_MEDIA:/media
      - /etc/localtime:/etc/localtime:ro
      - /var/run/dbus/:/var/run/dbus/:z
    restart: unless-stopped
    healthcheck:
      # FIXME: need to import .env to actual host environment in order for this to be dynamic!
      test: ["CMD-SHELL", "curl -f \"http://${DOCKER_LOCALHOST}:${HOME_ASSISTANT_EXTERNAL_PORT}/manifest.json\" || exit 1"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    extra_hosts:
      - "${DOCKER_LOCALHOST}:host-gateway"
    depends_on:
      home-assistant-postgres:
        condition: service_healthy
    privileged: true
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - POSTGRES_CONNECTION=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DOCKER_LOCALHOST}:${POSTGRES_EXTERNAL_PORT}/${POSTGRES_DEFAULT_DB}
      # https://github.com/home-assistant/core/issues/105768
      # https://www.home-assistant.io/installation/alternative#optimizations
      - DISABLE_JEMALLOC=true

  home-assistant-postgres:
    container_name: home-assistant-postgres
    labels:
      - wud.tag.include=${WUD_LINUX_BASE_MINOR_SEMVAR_INCLUDE_LABEL}
      - wud.link.template=https://www.postgresql.org/docs/release/$${major}.$${minor}/
    image: postgres:${POSTGRES_TAG}
    restart: always
    # https://stackoverflow.com/questions/65115627/safe-ways-to-specify-postgres-parameters-for-healthchecks-in-docker-compose
    healthcheck:
      # FIXME: need to import .env to actual host environment in order for this to be dynamic!
      # FIXME: I think this is causing errors
#      test: [ "CMD-SHELL", "pg_isready", "-U", "portal", "-d", "${POSTGRES_DEFAULT_DB}" ]
      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DEFAULT_DB} -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    extra_hosts:
      - "${DOCKER_LOCALHOST}:host-gateway"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DEFAULT_DB}
    ports:
      - ${POSTGRES_EXTERNAL_PORT}:5432
    volumes:
      - home-assistant-pgdata:/var/lib/postgresql/data

  mosquitto:
    container_name: mosquitto
    labels:
      - wud.tag.include=${WUD_SEMVAR_INCLUDE_LABEL}
      - wud.link.template=https://mosquitto.org/ChangeLog.txt
    image: eclipse-mosquitto:${MOSQUITTO_TAG}
    restart: always
    healthcheck:
      # FIXME: need to import .env to actual host environment in order for this to be dynamic!
#      test: [ "CMD-SHELL", "mosquitto_sub -u hass -P raspberry -t '$$SYS/#' -C 1 -i healthcheck1 -W 3 || exit 1" ]
      test: [ "CMD-SHELL", "mosquitto_sub -u ${MOSQUITTO_USER} -P ${MOSQUITTO_PASSWORD} -t '$$SYS/#' -C 1 -i healthcheck1 -W 3 || exit 1" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    extra_hosts:
      - "${DOCKER_LOCALHOST}:host-gateway"
    ports:
      - ${MOSQUITTO_EXTERNAL_PORT}:1883
      - "9001:9001"  # not sure I'm even using this port
    volumes:
      - ${DATADIR}/mosquitto/config:/mosquitto/config
      - ${DATADIR}/mosquitto/data:/mosquitto/data
      - ${DATADIR}/mosquitto/log:/mosquitto/log

  # for healthchecks: https://github.com/Koenkk/zigbee2mqtt/issues/1310
  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt:${ZIGBEE2MQTT_TAG}
    labels:
      - wud.tag.include=${WUD_SEMVAR_INCLUDE_LABEL}
      - wud.link.template=https://github.com/Koenkk/zigbee2mqtt/releases/tag/$${major}.$${minor}.$${patch}
    restart: unless-stopped
    healthcheck:
      # FIXME: need to import .env to actual host environment in order for this to be dynamic!
      #      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://10.0.1.131:8777/ || exit 1"]
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider \"http://${DOCKER_LOCALHOST}:${ZIGBEE2MQTT_EXTERNAL_PORT}/\" || exit 1" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    extra_hosts:
      - "${DOCKER_LOCALHOST}:host-gateway"
    links:
      - mosquitto:mosquitto
    depends_on:
      mosquitto:
        condition: service_healthy
    volumes:
      - ${DATADIR}/zigbee2mqtt/config:/app/data
      - /run/udev:/run/udev:ro
    ports:
      - ${ZIGBEE2MQTT_EXTERNAL_PORT}:8080
    environment:
      - TZ=${TZ}
      - ZIGBEE2MQTT_CONFIG_PERMIT_JOIN=${ZIGBEE2MQTT_PERMIT_JOIN}
      - ZIGBEE2MQTT_CONFIG_MQTT_SERVER=${ZIGBEE2MQTT_MQTT_SERVER}
      - ZIGBEE2MQTT_CONFIG_MQTT_BASE_TOPIC=${ZIGBEE2MQTT_BASE_TOPIC}
#      - ZIGBEE2MQTT_CONFIG_ADVANCED_CHANNEL=${ZIGBEE2MQTT_ZIGBEE_CHANNEL}
      - ZIGBEE2MQTT_CONFIG_MQTT_USER=${MOSQUITTO_USER}
      - ZIGBEE2MQTT_CONFIG_MQTT_PASSWORD=${MOSQUITTO_PASSWORD}
      - ZIGBEE2MQTT_CONFIG_MQTT_CLIENT_ID=${ZIGBEE2MQTT_CONFIG_MQTT_CLIENT_ID}
      - ZIGBEE2MQTT_CONFIG_SERIAL_PORT=${ZIGBEE_USB_DONGLE_PORT}
      - ZIGBEE2MQTT_CONFIG_FRONTEND_URL=${ZIGBEE2MQTT_DEVICE_DESC_URL}
    devices:
      - ${ZIGBEE_USB_DONGLE_PORT}:${ZIGBEE_USB_DONGLE_PORT}
      - ${ZIGBEE_USB_DONGLE_PORT}:/dev/ttyUSB0

  node-red:
    container_name: node-red
    image: nodered/node-red:${NODE_RED_TAG}
    labels:
      - wud.tag.include=${WUD_SEMVAR_INCLUDE_LABEL}
      - wud.link.template=https://github.com/node-red/node-red/releases/tag/$${major}.$${minor}.$${patch}
    restart: unless-stopped
#    healthcheck:
#      # FIXME: need to import .env to actual host environment in order for this to be dynamic!
##      test: [ "CMD-SHELL", "curl -f \"http://${DOCKER_LOCALHOST}:${NODE_RED_HEALTHCHECK_PORT}/ready\" || exit 1" ]
#      test: [ "CMD-SHELL", "curl -f \"http://${DOCKER_LOCALHOST}:${NODE_RED_EXTERNAL_PORT}/v2/healthcheck\" || exit 1" ]
#      interval: 30s
#      timeout: 60s
#      retries: 5
#      start_period: 80s
    depends_on:
      home-assistant:
        condition: service_healthy
    extra_hosts:
      - "${DOCKER_LOCALHOST}:host-gateway"
    environment:
      - TZ=${TZ}
      - PROMETHEUS_COLLECT_DEFAULT_METRICS=true
    ports:
      - ${NODE_RED_EXTERNAL_PORT}:1880
#      - ${NODE_RED_HEALTHCHECK_PORT}:${NODE_RED_HEALTHCHECK_PORT}
    volumes:
      # flow data (settings file should already be there from the installation scripts)
      - ${DATADIR}/node_red/config/:/data
      # - ${DATADIR}/node_red/config/projects/.sshkeys:/usr/src/node-red/.ssh

  pihole:
    container_name: pihole
    # TODO: need to update the WUD labels to include the leading `0` padding in the template or it fails
    labels:
      - wud.tag.include=${WUD_SEMVAR_INCLUDE_LABEL}
      - wud.link.template=https://github.com/pi-hole/docker-pi-hole/releases/tag/$${major}.$${minor}.$${patch}
    image: pihole/pihole:${PIHOLE_TAG}
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    network_mode: host
    privileged: true
    restart: unless-stopped
    extra_hosts:
      - "${DOCKER_LOCALHOST}:host-gateway"
    environment:
      - TZ=${TZ}
      - WEBPASSWORD=${PIHOLE_PASSWORD}
    # Volumes store your data between container upgrades
    volumes:
      - ${DATADIR}/pihole/config/etc-pihole:/etc/pihole
      - ${DATADIR}/pihole/config/etc-dnsmasq.d:/etc/dnsmasq.d
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed

volumes:
  home-assistant-pgdata:
    driver: local
